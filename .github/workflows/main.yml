name: Deploy ARM Template
on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.4.1
        with:
          node-version: 18.x
      - name: Set environment variables
        run: |
          echo "SUBSCRIPTION_ID=9ec75d1a-60ff-4851-8c9f-dca73c17bcd2" >> $GITHUB_ENV
          echo "resourceGroupName=RG-SME-DataPipeline" >> $GITHUB_ENV
      - name: Ensure adfroot directory exists
        run: mkdir -p ${{ github.workspace }}/adfroot
      - name: Ensure required directories exist
        run: |
          mkdir -p ${{ github.workspace }}/adfroot/{integrationRuntime,pipeline,dataset,linkedService,trigger,dataflow,credential,adfcdc,managedVirtualNetwork}
          ls -al ${{ github.workspace }}/adfroot
      - name: Install ADF Utilities package
        run: npm install
        working-directory: ${{ github.workspace }}/adfroot/build
      - name: Validate
        run: |
          npm run build validate "${{ github.workspace }}/adfroot/" "/subscriptions/${{ env.SUBSCRIPTION_ID }}/resourceGroups/${{ env.resourceGroupName }}/providers/Microsoft.DataFactory/factories/testadf54"
        working-directory: ${{ github.workspace }}/adfroot/build
      - name: Validate and Generate ARM template
        run: |
          npm run build export "${{ github.workspace }}/adfroot/" "/subscriptions/${{ env.SUBSCRIPTION_ID }}/resourceGroups/${{ env.resourceGroupName }}/providers/Microsoft.DataFactory/factories/testadf54" "ExportedArmTemplate"
        working-directory: ${{ github.workspace }}/adfroot/build
      - name: Verify Exported Directory
        run: |
          if [ ! -d "${{ github.workspace }}/adfroot/build/ExportedArmTemplate" ]; then
            echo "ExportedArmTemplate directory does not exist!"
            exit 1
          fi
      - name: Verify ARM template files
        run: |
          echo "Checking for ARMTemplateForFactory.json file"
          ls -al ${{ github.workspace }}/adfroot/build/ExportedArmTemplate
          if [ ! -f "${{ github.workspace }}/adfroot/build/ExportedArmTemplate/ARMTemplateForFactory.json" ]; then
            echo "ARMTemplateForFactory.json does not exist!"
            exit 1
          fi
          echo "Checking for ARMTemplateParametersForFactory.json file"
          if [ ! -f "${{ github.workspace }}/adfroot/build/ExportedArmTemplate/ARMTemplateParametersForFactory.json" ]; then
            echo "ARMTemplateParametersForFactory.json does not exist!"
            exit 1
          fi
        working-directory: ${{ github.workspace }}/adfroot/build
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ExportedArmTemplate
          path: ${{ github.workspace }}/adfroot/build/ExportedArmTemplate
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: ExportedArmTemplate
          path: ${{ github.workspace }}/adfroot/build/ExportedArmTemplate
      - name: List directory contents after download
        run: ls -al ${{ github.workspace }}/adfroot/build/ExportedArmTemplate
      - name: Verify downloaded artifact
        run: |
          echo "Checking for ARMTemplateForFactory.json file in downloaded artifact"
          if [ ! -f "${{ github.workspace }}/adfroot/build/ExportedArmTemplate/ARMTemplateForFactory.json" ]; then
            echo "ARMTemplateForFactory.json does not exist in the downloaded artifact!"
            exit 1
          fi
          echo "Checking for ARMTemplateParametersForFactory.json file in downloaded artifact"
          if [ ! -f "${{ github.workspace }}/adfroot/build/ExportedArmTemplate/ARMTemplateParametersForFactory.json" ]; then
            echo "ARMTemplateParametersForFactory.json does not exist in the downloaded artifact!"
            exit 1
          fi
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Install Azure PowerShell
        run: |
          
          pwsh -Command "Install-Module -Name Az -AllowClobber -Force"
          pwsh -Command "Import-Module Az"
          pwsh -Command "Install-Module -Name Az.DataFactory -Force"
          pwsh -Command "Install-Module -Name Az.DataFactory -AllowClobber -Force"
          pwsh -Command "Import-Module Az.DataFactory"
          pwsh -Command "Install-Module AzureRM.DataFactoryV2"
          # pwsh -Command "Import-Module AzureRM.DataFactoryV2"
         
          pwsh -Command  "Install-Module -Name Az -Repository PSGallery -Force"
          pwsh -Command "Install-Module -Name Az.Accounts -Force"
          # pwsh -Command "Install-Module -Name Az.DataFactory -Force"
          pwsh -Command "Get-AzDataFactoryV2Trigger -ResourceGroupName "RG-SME-DataPipeline" -DataFactoryName "testadf54""
          

     
      - name: Verify Azure PowerShell Module Installation
        run: pwsh -Command "Get-Module -ListAvailable"
      
         
      - name: data-factory-deploy
        uses: Azure/data-factory-deploy-action@v1.2.0
        with:
          resourceGroupName: RG-SME-DataPipeline
          dataFactoryName: testadf54
          armTemplateFile: ${{ github.workspace }}/adfroot/build/ExportedArmTemplate/ARMTemplateForFactory.json
          armTemplateParametersFile: ${{ github.workspace }}/adfroot/build/ExportedArmTemplate/ARMTemplateParametersForFactory.json
          additionalParameters: '-factoryName $(factoryName) -kv_data_eus_01'
          skipAzModuleInstallation: true
